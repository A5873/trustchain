name: Go

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/go.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/go.yml'

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.20', '1.24']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go install golang.org/x/lint/golint@latest
        go install golang.org/x/tools/cmd/goimports@latest

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Run golint
      run: golint -set_exit_status=1 ./...

    - name: Run goimports
      run: |
        files=$(goimports -l .)
        if [ -n "$files" ]; then
          echo "The following files have formatting issues:"
          echo "$files"
          exit 1
        fi

    - name: Run tests
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        fail_ci_if_error: false

  integration:
    name: Integration Tests
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Run integration tests
      run: |
        # Assuming integration tests are in a separate directory or have specific tags
        go test -tags=integration -v ./...

